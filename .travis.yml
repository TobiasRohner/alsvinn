language: cpp

dist: xenial
compiler:
  - gcc

env:
  - ALSVINN_GCC_VERSION=5
  - ALSVINN_GCC_VERSION=6
  - ALSVINN_GCC_VERSION=7
  - ALSVINN_BUILD_TYPE=Release
  - ALSVINN_BUILD_TYPE=Debug
  - BOOST_MAJOR_VERSION=1
  - BOOST_MINOR_VERSION=67
  - BOOST_RELEASE_VERSION=0
  - PNETCDF_VERSION 1.11.1
  - GTEST_VERSION 1.8.0




before_install:
  # See https://stackoverflow.com/a/22270645
  - # g++
  - if [ "$CXX" == "g++" ]; then sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test; fi

  # clang
  - if [ "$CXX" == "clang++" ]; then sudo add-apt-repository -y ppa:h-rayflood/llvm; fi

  # cmake
  - sudo add-apt-repository -y ppa:andrew-fuller/cmake
install:
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir ${DEPS_DIR}
  - INSTALL_PREFIX=${TRAVIS_BUILD_DIR}/prefix
  - mkdir ${INSTALL_PREFIX}
  - sudo apt-get update -qq
  # See https://stackoverflow.com/a/22270645
  - if [ "$CXX" == "g++" ]; then sudo apt-get install -qq -y g++-${ALSVINN_GCC_VERSION}; export CXX="g++-${ALSVINN_GCC_VERSION}"; fi
  - sudo apt-get install -y cmake git build-essential wget doxygen libomp-dev libopenmpi-dev m4 unzip python python-numpy python-scipy python-dev libcurl4-openssl-dev zlib1g-dev libhdf5-dev curl libnetcdf-dev libgtest-dev

    #
    # Boost
  - cd $DEPS_DIR
  - travis_retry wget https://dl.bintray.com/boostorg/release/${BOOST_MAJOR_VERSION}.${BOOST_MINOR_VERSION}.${BOOST_RELEASE_VERSION}/source/boost_${BOOST_MAJOR_VERSION}_${BOOST_MINOR_VERSION}_${BOOST_RELEASE_VERSION}.tar.bz2
  - tar xvf boost_${BOOST_MAJOR_VERSION}_${BOOST_MINOR_VERSION}_${BOOST_RELEASE_VERSION}.tar.bz2 && cd boost_${BOOST_MAJOR_VERSION}_${BOOST_MINOR_VERSION}_${BOOST_RELEASE_VERSION} && ./bootstrap.sh --with-python=`which python` --prefix=$INSTALL_PREFIX &&  ./b2 --build type=complete --toolset=$CC --layout=tagged install

  # pnetcdf
  ##### PNETCDF
  - cd $DEPS_DIR
  - travis_retry wget https://parallel-netcdf.github.io/Release/pnetcdf-${PNETCDF_VERSION}.tar.gz
  - tar xvf pnetcdf-${PNETCDF_VERSION}.tar.gz && cd pnetcdf-${PNETCDF_VERSION} && export CFLAGS='-fPIC' &&CC=`which mpicc` ./configure --prefix=$INSTALL_PREFIX && make install

  # gtest
  - cd $DEPS_DIR
  - travis_retry wget https://github.com/google/googletest/archive/release-${GTEST_VERSION}.zip
  - unzip release-${GTEST_VERSION}.zip && cd googletest-release-${GTEST_VERSION} && mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX -DCMAKE_C_COMPILER=`which $CC` -DCMAKE_CXX_COMPILER=`which $CXX`&&\
    make install && find . -iname '*.a' -exec cp {} ${INSTALL_PREFIX}/lib/ \;

script:
  - mkdir build
  - cd build
  - cmake .. -DCMAKE_BUILD_TYPE=${ALSVINN_BUILD_TYPE} -DCMAKE_PREFIX_PATH=${INSTALL_PREFIX} -DALSVINN_USE_CUDA=OFF
  - make
  - ./test/alstest
