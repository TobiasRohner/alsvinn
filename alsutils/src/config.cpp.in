#include "alsutils/config.hpp"
#include "alsutils/types.hpp"
#include <limits>
#include <sstream>

namespace alsutils {
  std::string getVersionControlID() {
    return "@GIT_SHA1@";
  }

  std::string getBuildType() {
    return "@CMAKE_BUILD_TYPE@";
  }

  std::string getCUDAVersion() {
    return "@CUDA_VERSION_STRING@";
  }

  std::string getCXXFlags() {
    return "@CMAKE_CXX_FLAGS@";
  }

  std::string getCUDAFlags() {
    return "@CMAKE_CUDA_FLAGS@";
  }

std::string getVersionControlStatus() {
  return "@GIT_VERSION_STATUS@";
}


  void dumpInformationToLog() {

    ALSVINN_LOG(INFO, "++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
                   << "Git version:       " << getVersionControlID() << "\n"
                   << "Repository was:    " << getVersionControlStatus() << "\n"
                   << "Build type :       " << getBuildType() << "\n"
                   << "CUDA Version:      " << getCUDAVersion() << "\n"
                   << "Extra CXX flags:   " << getCXXFlags() << "\n"
                   << "CUDA flags:        " << getCUDAFlags() << "\n"
		   << "Floating point:    " << getFloatingPointPrecisionDescription() << "\n"
                   << "++++++++++++++++++++++++++++++++++++++++++++++++++++\n");
  }


  std::string getAllCmakeVariables() {
    return R"V0G0N(@ALL_CONFIGURATIONS@)V0G0N";
  }

  void writeCmakeConfiguration(const std::string& outputFile) {
    std::ofstream output(outputFile);
    output << getAllCmakeVariables() << std::endl;
  }

  std::string getFloatingPointPrecisionDescription() {
#ifdef ALSVINN_USE_FLOAT
    return "float (single precision, 32 bits)";
#else
    return "double (double precision, 64 bits)";
#endif
}

std::string getFloatingPointType() {
#ifdef ALSVINN_USE_FLOAT
  return "float";
#else
  return "double";
#endif
}

std::string getFloatingPointMaxValue() {
  std::stringstream ss;

  ss << std::numeric_limits<real>::max();

  return ss.str();
}


std::string getFloatingPointMinValue() {
  std::stringstream ss;

  ss << std::numeric_limits<real>::min();

  return ss.str();
}


std::string getFloatingPointEpsilon() {

  std::stringstream ss;

  ss << std::numeric_limits<real>::epsilon();

  return ss.str();
}

}
